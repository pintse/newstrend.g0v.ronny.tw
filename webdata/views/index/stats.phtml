<?= $this->partial('/common/header.phtml', $this) ?>
<h1><?= $this->escape($this->name_list->name) ?></h1>
<code>http://<?= $_SERVER['HTTP_HOST'] ?>/index/api/<?= $this->name_list->id ?></code>
<table class="table">
<thead>
<tr>
<td id="date"></td>
<?php foreach ($this->sources as $id => $name) { ?>
<td><?= $this->escape($name) ?></td>
<?php } ?>
</tr>
</thead>
<tbody>
<tr>
<td>關聯新聞數</td>
<?php foreach ($this->sources as $id => $name) { ?>
<td id="cell-hit-<?= $id ?>"></td>
<?php } ?>
</tr>
<tr>
<td>總新聞數</td>
<?php foreach ($this->sources as $id => $name) { ?>
<td id="cell-total-<?= $id ?>"></td>
<?php } ?>
</tr>
<tr>
<td>每萬篇出現數</td>
<?php foreach ($this->sources as $id => $name) { ?>
<td id="cell-avg-<?= $id ?>"></td>
<?php } ?>
</tr>
</tbody>
</table>
<style>

body {
  font: 10px sans-serif;
}

.axis path,
.axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

.x.axis path {
  display: none;
}

.line {
  fill: none;
  stroke: steelblue;
  stroke-width: 1.5px;
}

</style>
<body>
<script src="http://d3js.org/d3.v3.js"></script>
<script>

var tables = {};
var sources = <?= json_encode($this->sources) ?>;
$.get('/index/api/<?= $this->name_list->id ?>', function(ret){
    for (var i = 0; i < ret.hit_count.length; i ++) {
        tables[ret.hit_count[i].date + '-' + ret.hit_count[i].source] = ret.hit_count[i];
    }
}, 'json');

var margin = {top: 20, right: 80, bottom: 30, left: 50},
    width = 960 - margin.left - margin.right,
    height = 400 - margin.top - margin.bottom;

var parseDate = d3.time.format("%Y%m%d").parse;

var x = d3.time.scale()
    .range([0, width]);

var y = d3.scale.linear()
    .range([height, 0]);

var color = d3.scale.category10();

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom");

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left");

var line = d3.svg.line()
    .interpolate("basis")
    .x(function(d) { return x(d.date); })
    .y(function(d) { return y(d.temperature); });

var svg = d3.select("body").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

$.get("/index/csv/<?= $this->name_list->id ?>", function(ret){
  var lines = ret.split("\n");
  var columns = lines[0].split(",");
  records = [];
  for (var i = 1; i < lines.length; i += 2) {
      record = {};
          
      data_line = lines[i];
      if ('' == data_line) {
          break;
      }
      total_line = lines[i + 1];

      data_values = data_line.split(',');
      total_values = total_line.split(',');

      var year = data_values[0].substr(0, 4);
      var month = data_values[0].substr(4, 2);
      var day = data_values[0].substr(6, 2);
      record.date = data_values[0]; //new Date(year + '/' + month + '/' + day);

      for (var j = 1; j < columns.length; j ++) {
          if (parseInt(data_values[j]) && parseInt(total_values[j])) {
              record[columns[j]] = 10000.0 * parseInt(data_values[j]) / parseInt(total_values[j]);
          } else {
              record[columns[j]] = 0;
          }
      }

      records.push(record);
  }
  data = records;
  color.domain(d3.keys(data[0]).filter(function(key) { return key !== "date"; }));

  data.forEach(function(d) {
    d.date = parseDate(d.date);
  });

  var cities = color.domain().map(function(name) {
    return {
      name: name,
      values: data.map(function(d) {
        return {date: d.date, temperature: +d[name]};
      })
    };
  });

  x.domain(d3.extent(data, function(d) { return d.date; }));

  y.domain([
    d3.min(cities, function(c) { return d3.min(c.values, function(v) { return v.temperature; }); }),
    d3.max(cities, function(c) { return d3.max(c.values, function(v) { return v.temperature; }); })
  ]);

  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
    .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end")
      .text("一萬篇新聞中出現次數");

  var city = svg.selectAll(".city")
      .data(cities)
    .enter().append("g")
      .attr("class", "city");

  city.append("path")
      .attr("class", "line")
      .attr("d", function(d) { return line(d.values); })
      .style("stroke", function(d) { return color(d.name); });

  city.append("text")
      .datum(function(d) { return {name: d.name, value: d.values[d.values.length - 1]}; })
      .attr("transform", function(d) { return "translate(" + x(d.value.date) + "," + y(d.value.temperature) + ")"; })
      .attr("x", 3)
      .attr("dy", ".35em")
      .text(function(d) { return d.name; });

    d3.select('svg').on('mouseover', function(d){
        var date = x.invert(d3.mouse(this)[0] - 50);
        var ymd = date.getFullYear() * 10000 + (date.getMonth() + 1) * 100 + date.getDate();
        $('#date').text(ymd);
        for (var id in sources) {
            if ('undefined' === typeof(tables[ymd + '-' + id])) {
                $('#cell-total-' + id).text('');
                $('#cell-hit-' + id).text('');
                $('#cell-avg-' + id).text('');
            } else {
                $('#cell-total-' + id).text(tables[ymd + '-' + id]['total_news']);
                $('#cell-hit-' + id).text(tables[ymd + '-' + id]['count']);
                $('#cell-avg-' + id).text(Math.floor(10000.0 * tables[ymd + '-' + id]['count'] / tables[ymd + '-' + id]['total_news']));
            }
        }
    });

}, 'text');

</script>
<?= $this->partial('/common/footer.phtml') ?>
